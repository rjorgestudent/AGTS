function output= TrainDataGeneratorBoxSizeBatches(img)
%Image Processing Function
%
% IM      - Input image.
% RESULTS - A scalar structure with the processing results.
%

%--------------------------------------------------------------------------
% Auto-generated by imageBatchProcessor App. 
%
% When used by the App, this function will be called for every input image
% file automatically. IM contains the input image as a matrix. RESULTS is a
% scalar structure containing the results of this processing function.
%
%--------------------------------------------------------------------------


clc
% Replace the sample below with your code----------------------------------
    doinput = false;
    boxSizes =  []; 
    centres = zeros(0,2);
    corners = zeros(0,4);
    fig = figure('KeyPressFcn',@(obj,evt) 0); 
	clf;
    imagesc(img)
    if size(img,3)==1
        colormap(gray)
    end
    axis equal
    hold on
    
    if ~ isempty(corners)
        for i=1:size(corners,1)
            rectangle('Position',  corners(i, :),'EdgeColor','b', 'LineWidth', 2)
        end 
    end
    plot(centres(:,1),centres(:,2),'b+')
    
    while true
       
        if (doinput)
			[x, y] = ginput(2);
            
            %%%% Algorithm to get the rectangle properties %%%%
            boxSizeMean = floor(mean([x(2)-x(1), y(2)-y(1)]));
            
            % Box sizes have to be odd numbers
            if bitget(boxSizeMean,1) %odd
               boxSizeCurrentSelection = boxSizeMean;
            else %even
               boxSizeCurrentSelection = boxSizeMean+1;
            end
                  
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            corners = round([corners; x(1), y(1), boxSizeCurrentSelection, boxSizeCurrentSelection]);
            centres = [centres; round(x(1)+1+ (boxSizeCurrentSelection-1)/2), round(y(1)+1+ (boxSizeCurrentSelection-1)/2) ];
            boxSizes = [boxSizes; boxSizeCurrentSelection];
            doinput = false;
        end
        
        if ~isempty(corners)
            for i=1:size(corners,1)
                rectangle('Position',  corners(i,:),'EdgeColor','b', 'LineWidth', 2)
            end 
        end
        plot(centres(:,1),centres(:,2),'b+')
        drawnow

        
        % step through volume
        while true       

            set(fig,'CurrentCharacter','s');
            waitfor(gcf,'CurrentCharacter');
            k = get(fig,'CurrentCharacter');

            if k == 'x'
                close
                return;
            elseif double(k) == 8
                disp('Removing')
                corners(end,:) = [];
                centres(end,:) = [];
                boxSizes(end,:) = [];
                hold off
                imagesc(img)
                axis equal
                hold on
                
                for i=1:size(corners,1)
                    rectangle('Position',  corners(i,:),'EdgeColor','b', 'LineWidth', 2)
                end 
                plot(centres(:,1),centres(:,2),'b+')
                drawnow
                
                break;
            elseif k == ' ' %space
                doinput = true;
                break
            end		
        end
    output = [centres, boxSizes];
    end


%--------------------------------------------------------------------------
